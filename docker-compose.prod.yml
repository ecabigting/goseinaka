# Purpose: Defines the services for deploying GoSeinaka in a production-like environment.
services:
  goseinaka-api:
    build:
      context: .
      # Uses the main multi-stage Dockerfile for production builds
      dockerfile: Dockerfile 
      # Optional: Pass build arguments if your Dockerfile uses them (e.g., for TARGETOS/TARGETARCH)
      # args:
      #   TARGETOS: linux
      #   TARGETARCH: amd64
      # Different container name for prod
    container_name: goseinaka_api_prod 
    ports:
      # Maps the host port (defined by API_PORT in .env, or defaults to 8080)
      # to the container port (also defined by API_PORT in .env, or defaults to 8080).
      # Ensure your production environment or .env file has the correct API_PORT.
      - "${API_PORT:-8080}:${API_PORT:-8080}"

    env_file:
      # Loads variables from your .env file.
      # In a true production environment, you might use other mechanisms
      # for managing secrets and configurations (e.g., Docker secrets,
      # HashiCorp Vault, cloud provider secret managers).
      # Using .env here is for consistency if you deploy to a simple VM
      # or a platform that expects .env.
      - .env
    # Restart policy (optional, but common for production).
    # 'unless-stopped' restarts the container if it exits, unless it was manually stopped.
    # Other options: 'no', 'on-failure', 'always'.
    restart: unless-stopped

    # Healthcheck is highly recommended for production.
    healthcheck:
      # Command to run inside the container to check health.
      # Uses the API_PORT from the environment.
      test: ["CMD-SHELL", "wget -q --spider --tries=1 --timeout=5 http://localhost:${API_PORT:-8080}/health || exit 1"]
      # Alternative using curl if wget is not in alpine:latest by default (curl usually is):
      # test: ["CMD-SHELL", "curl -f http://localhost:${API_PORT:-8080}/health || exit 1"]
      # How often to run the check.
      interval: 30s
      # How long to wait for a response.
      timeout: 10s
      # How many times to retry on failure before marking as unhealthy.
      retries: 3
      # Grace period for the service to start up before checks begin.
      # Give your Go app enough time to initialize DB, etc.
      start_period: 60s
